var searchIndex = JSON.parse('{\
"graph":{"doc":"","t":[0,0,0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,8,3,11,11,11,11,10,11,11,11,11,11,11,11,8,3,8,3,3,8,8,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,12,11,11,10,11,11,12,12,11,11,11,11,11,11,11,11,11,11],"n":["matrix_graph","serialization","traversable","types","MatrixGraph","MatrixGraphNeighborsIterator","NodeIterator","add_edge","add_node","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","contains_edge","contains_node","default","edge_count","fmt","from","from","from","from_edges","get_adjacency_matrix","get_edge_by_index","get_graph","get_index_of","get_node_by_index","into","into","into","into_iter","into_iter","neighbors","new","next","next","node_count","node_iter","remove_edge","remove_node","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","de_tgf","ser_tgf","BfsIterable","BreadthFirstTraverseIterator","bfs_iter","borrow","borrow_mut","from","get_graph","into","into_iter","new","next","try_from","try_into","type_id","Adjacency","AdjacencyMatrix","Gettable","GraphEntry","IteratorHandle","MatrixGraphNode","Neighbors","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","edges","edges","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","get_adjacency_matrix","get_edge_by_index","get_node_by_index","into","into","into","into_iter","iterator","ne","ne","neighbors","new","next","node","nodes","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["graph","","","","graph::matrix_graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","graph::serialization","","graph::traversable","","","","","","","","","","","","","","graph::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Graph representation with adjacency matrix","","","Adds edge between two nodes","Adds new node in graph","","","","","","","Checks if edge between two nodes exists","Checks if node exists in graph","","Returns count of edges","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create MatrixGraph from iterator of tuples where each …","","","","Returns index of node or None if not found","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Returns count of nodes","Returns iterator over nodes","Removes edge between two nodes","Removes node and all edges for it","","","","","","","","","","","","","Boundary for getting iterator over breadth first traverse …","Iterates over breadth first traverse of graph represented …","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Boundary for representing graph as adjacency matrix","Structure for representing graph as adjacency matrix","Boundary for getting nodes and edges by index Can be …","Structure for returning while traversing graph","Generic iterator wrapper","Base type for graph node","Boundary for getting neighbors by graph node index","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,1,1,12,9,1,12,9,1,1,1,1,1,1,12,9,1,1,1,1,1,1,1,12,9,12,9,1,12,12,9,1,1,1,1,1,1,12,9,1,12,9,1,12,9,0,0,0,0,23,19,19,19,23,19,19,19,19,19,19,19,0,0,0,0,0,0,0,10,21,7,10,21,7,21,7,21,7,21,7,21,7,7,10,21,7,24,25,25,10,21,7,10,10,21,7,26,10,10,21,7,7,10,21,7,10,21,7,10,21,7],"f":[0,0,0,0,0,0,0,[[1,2,2]],[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2,2],3],[1,3],[[],1],[1,2],[[1,4],5],[[]],[[]],[[]],[6,1],[1,7],[[1,2,2],8],[1,1],[1,[[8,[2]]]],[[1,2],8],[[]],[[]],[[]],[[]],[[]],[[1,2],[[10,[9]]]],[11,12],[12,8],[9,8],[1,2],[1,12],[[1,2,2],8],[[1,2],8],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[16,[[14,[1,[18,[17]]]]]],[7,13],0,0,[2,19],[[]],[[]],[[]],[[]],[[]],[[]],[2,19],[19,8],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[21,[20]],21],3],[[[7,[20,20]],7],3],[[],3],[[],3],[[[21,[22]],4],5],[[7,4],5],[[[7,[22,22]],4],5],[[]],[[]],[[]],[[],7],[[2,2],8],[2,8],[[]],[[]],[[]],[[]],0,[[[21,[20]],21],3],[[[7,[20,20]],7],3],[2,10],[[],10],[10,8],0,0,[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15]],"p":[[3,"MatrixGraph"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"IntoIterator"],[3,"AdjacencyMatrix"],[4,"Option"],[3,"MatrixGraphNeighborsIterator"],[3,"IteratorHandle"],[3,"IndexSet"],[3,"NodeIterator"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"str"],[8,"Error"],[3,"Box"],[3,"BreadthFirstTraverseIterator"],[8,"PartialEq"],[3,"GraphEntry"],[8,"Debug"],[8,"BfsIterable"],[8,"Adjacency"],[8,"Gettable"],[8,"Neighbors"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
